services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ss360} -d ${POSTGRES_DB:-ss360}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks: [appnet]

  agents:
    build:
      context: .                     # repo root as build context
      dockerfile: services/agents/Dockerfile
    container_name: ss360-agents
    environment:
      # Optional, only used if you enable LLM verification in agents
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "8080:8080"                  # expose for host testing; remove if not needed
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      postgres:
        condition: service_started   # agents do not require DB, but wait for network
    restart: unless-stopped
    networks: [appnet]

  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # Agents URL inside the docker network
      AGENTS_URL: http://agents:8080
      # Optional OpenAI key if API layer ever needs it (not required now)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      agents:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [appnet]

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge

