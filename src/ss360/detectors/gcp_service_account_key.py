# Auto-generated by SS360 Dev Agent
import re
import json
from typing import Iterable, Dict, Iterator, List
from ss360.core.findings import Finding

NAME = "gcp_service_account_key"
SEVERITY = "high"

# GCP Service Account JSON key pattern - looks for the typical JSON structure
PATTERN = re.compile(
    r'\{\s*"type"\s*:\s*"service_account"[^}]*"private_key_id"[^}]*"private_key"[^}]*"client_email"[^}]*\}',
    re.IGNORECASE | re.DOTALL
)


def scan(blob: bytes, path: str) -> List[Finding]:
    """New detector interface using Finding objects."""
    text = blob.decode(errors="ignore")
    findings = []
    
    for match in PATTERN.finditer(text):
        key_json = match.group(0)
        
        # Find the line number
        line_num = text[:match.start()].count('\n') + 1
        
        # Try to parse JSON to extract client_email for better reporting
        client_email = ""
        try:
            key_data = json.loads(key_json)
            client_email = key_data.get('client_email', '')
        except json.JSONDecodeError:
            pass
            
        # Redact the key - just show it's a service account key
        hint = f"GCP Service Account Key{(' for ' + client_email) if client_email else ''}"
        
        findings.append(
            Finding.from_match(
                rule=NAME,
                path=path,
                line=line_num,
                match_hint=hint,
                severity=SEVERITY,
                reason="GCP Service Account JSON key detected",
            )
        )
    return findings


def detect(lines: Iterable[str]) -> Iterator[Dict[str, object]]:
    """
    Yield findings with line numbers when pattern matches.
    """
    for i, line in enumerate(lines, start=1):
        if PATTERN.search(line):
            yield {
                "id": "gcp_service_account_key",
                "title": "GCP Service Account Key (JSON)",
                "severity": "high",
                "description": "Sensitive value detected",
                "line": i,
            }
