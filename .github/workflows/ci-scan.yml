name: CI (lint + PR scan)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main, master, develop, "**/feat-**", "**/feature/**" ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - name: Install lint deps
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit==4.3.0

  scan:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install scan deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Run repo secret scan
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python scripts/ci_scan.py \
            --root . \
            --config services/agents/app/config/detectors.yaml \
            --max-findings 999999 \
            --json-out findings.json

      - name: Upload findings (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: findings-json
          path: findings.json

      - name: Comment findings on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          header: ss360-findings
          message: |
            ## üîç SS360 Findings

            Below is a summary; the full JSON is attached as an artifact.

            ```
            ${{ steps.summary.outputs.summary }}
            ```

      - name: Summarize findings for comment
        id: summary
        if: always()
        run: |
          python - <<'PY'
          import json, os, textwrap
          p = "findings.json"
          if not os.path.exists(p):
              print("summary=No findings file produced.")  # still sets an output key
              exit(0)
          data = json.load(open(p))
          items = data.get("findings", [])
          lines = []
          for f in items[:50]:
              path = f.get("path","?")
              kind = f.get("kind","?")
              line = f.get("line")
              match = (f.get("match","") or "")[:80].replace("\n"," ")
              loc = f"{path}:{line}" if line else path
              lines.append(f"- {kind} @ {loc} :: {match}")
          if not lines:
              lines = ["‚úÖ No secrets detected."]
          # GitHub output
          out = "\n".join(lines)
          out = out.replace("%","%25").replace("\n","%0A")
          print(f"summary={out}")
          PY
          echo "summary=${summary}"

      - name: Fail on threshold
        if: always()
        env:
          PYTHONPATH: ${{ github.workspace }}
          SS360_FAIL_IF_AT_LEAST: ${{ vars.SS360_FAIL_IF_AT_LEAST || '1' }}
        run: |
          python - <<'PY'
          import json, os, sys
          p = "findings.json"
          if not os.path.exists(p):
              print("No findings file produced.")
              sys.exit(1)
          data = json.load(open(p))
          n = len(data.get("findings", []))
          print(f"Secret-scan findings: {n}")
          threshold = int(os.getenv("SS360_FAIL_IF_AT_LEAST","1"))
          if n >= threshold:
              print("‚ùå Failing CI due to findings.")
              for f in data["findings"][:50]:
                  path = f.get("path","?")
                  kind = f.get("kind","?")
                  line = f.get("line")
                  match = (f.get("match","") or "")[:80].replace("\n"," ")
                  loc = f"{path}:{line}" if line else path
                  print(f"- {kind} @ {loc} :: {match}")
              sys.exit(1)
          print("‚úÖ No blocking findings.")
          PY
