# Auto-generated by SS360 Dev Agent
import re
import json
import base64
from datetime import datetime
from typing import Iterable, Dict, Iterator, List
from ss360.core.findings import Finding

NAME = "jwt_generic"
SEVERITY = "medium"

# JWT pattern: three base64url-encoded parts separated by dots
PATTERN = re.compile(
    r"\beyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\b"
)


def scan(blob: bytes, path: str) -> List[Finding]:
    """New detector interface using Finding objects."""
    text = blob.decode(errors="ignore")
    findings = []
    
    for line_num, line in enumerate(text.splitlines(), start=1):
        for match in PATTERN.finditer(line):
            token = match.group(0)
            
            # Try to decode JWT header to get more info
            expiry_info = ""
            try:
                parts = token.split('.')
                if len(parts) >= 2:
                    # Decode payload (second part)
                    payload_b64 = parts[1]
                    # Add padding if needed
                    payload_b64 += '=' * (4 - len(payload_b64) % 4)
                    payload = json.loads(base64.urlsafe_b64decode(payload_b64))
                    
                    # Check for expiry
                    if 'exp' in payload:
                        exp_timestamp = payload['exp']
                        exp_date = datetime.fromtimestamp(exp_timestamp)
                        expiry_info = f" (expires: {exp_date.isoformat()})"
                        
            except Exception:
                # If JWT decoding fails, still report the finding
                pass
            
            # Redact the JWT - show prefix and indicate it's redacted
            hint = f"{token[:20]}...[JWT-REDACTED]"
            
            findings.append(
                Finding.from_match(
                    rule=NAME,
                    path=path,
                    line=line_num,
                    match_hint=hint,
                    severity=SEVERITY,
                    reason=f"JSON Web Token detected{expiry_info}",
                    meta={"full_token": token}  # Store original for classification
                )
            )
    return findings


def detect(lines: Iterable[str]) -> Iterator[Dict[str, object]]:
    """
    Yield findings with line numbers when pattern matches.
    """
    for i, line in enumerate(lines, start=1):
        if PATTERN.search(line):
            yield {
                "id": "jwt_generic",
                "title": "JSON Web Token (generic)",
                "severity": "high",
                "description": "Sensitive value detected",
                "line": i,
            }
